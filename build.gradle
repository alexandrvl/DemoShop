plugins {
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id 'com.google.cloud.tools.jib' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version '5.1.0'
    id "idea"
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

apply plugin: 'io.spring.dependency-management'

apply from: "gradle/docker.gradle"

springBoot {
    mainClassName = 'com.example.demo.DemoApplication'
    buildInfo()
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs.addAll("-parameters")
    }
    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }
}

defaultTasks "bootRun"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate:hibernate-envers'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'
    implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.11.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.11.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.2'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.postgresql:postgresql:42.2.17'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'com.nimbusds:nimbus-jose-jwt:8.20'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.testcontainers:testcontainers:1.15.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.15.2'
    testImplementation 'org.testcontainers:mockserver:1.15.2'
    testImplementation 'org.testcontainers:postgresql:1.15.2'
    testImplementation 'org.mock-server:mockserver-client-java:5.11.2'
}

test {
    useJUnitPlatform() {
        excludeTags 'integration'
    }
}

task restdocsTest(type: Test) {
    group = 'verification'

    useJUnitPlatform {
        includeTags 'restdocs'
    }
}

asciidoctor {
    dependsOn(test)
    sourceDir 'src/main/asciidoc'
    attributes \
		'snippets': file('build/generated-snippets')
}

bootJar {
    dependsOn(asciidoctor)
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

task integrationTest(type: Test) {
    group = 'verification'

    useJUnitPlatform {
        includeTags 'integration'
    }
}
